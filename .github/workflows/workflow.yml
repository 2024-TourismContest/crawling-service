name: Crawling-Service Blue–Green CI/CD

on:
  push:
    branches: [ main ]

permissions:
  contents: read

defaults:
  run:
    working-directory: crawling-service

env:
  DOCKER_IMAGE: mschoi6641/crawling-service
  PROJECT_BASE_DIR: /home/mschoi/Desktop/tourismContest/Yaguhang-RE/crawling-service

jobs:
  build-and-push:
    name: Build & Push on Self-Hosted
    runs-on: [ self-hosted, crawler ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure resources folder exists
        run: mkdir -p src/main/resources

      - name: Copy application.yml from env directory
        run: |
          if [ -f "${PROJECT_BASE_DIR}/env/application.yml" ]; then
            cp ${PROJECT_BASE_DIR}/env/application.yml ./src/main/resources/application.yml
          else
            echo "Warning: application.yml not found at ${PROJECT_BASE_DIR}/env/"
            exit 1
          fi

      - name: Build JAR
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar --no-daemon

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        run: |
          # 버전 정보 생성
          VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}
          
          # Docker 이미지 빌드
          docker build -t ${DOCKER_IMAGE}:${VERSION} -t ${DOCKER_IMAGE}:latest .
          
          # Docker 이미지 푸시
          docker push ${DOCKER_IMAGE}:${VERSION}
          docker push ${DOCKER_IMAGE}:latest
          
          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV

  deploy:
    name: SSH Blue–Green Deploy on Self-Hosted
    needs: build-and-push
    runs-on: [ self-hosted, crawler ]

    steps:
      - name: Run Blue–Green deploy script on server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} -p 30022 << 'EOF'
            set -e
          
            BASE_DIR="${PROJECT_BASE_DIR}"
            DOCKER_IMAGE="${DOCKER_IMAGE}"
          
            cd "$BASE_DIR"

            # 현재 구동 중인 스택 감지
            if docker ps --filter "name=crawler-blue" --format "{{.Names}}" | grep -q crawler-blue; then
              CURRENT=blue
              TARGET=green
            elif docker ps --filter "name=crawler-green" --format "{{.Names}}" | grep -q crawler-green; then
              CURRENT=green
              TARGET=blue
            else
              # 처음 배포인 경우
              CURRENT=""
              TARGET=blue
            fi

            echo "[DEPLOY] Current: ${CURRENT:-none}, Target: $TARGET"

            # Docker 이미지 최신 버전 pull
            docker pull $DOCKER_IMAGE:latest

            # 새 스택 배포
            echo "[DEPLOY] Starting $TARGET stack..."
            docker-compose -f docker-compose.$TARGET.yml up -d

            # 헬스체크 - 컨테이너가 정상적으로 시작될 때까지 대기
            echo "[DEPLOY] Waiting for $TARGET to be healthy..."
            for i in {1..30}; do
              if docker ps --filter "name=crawler-$TARGET" --filter "status=running" --format "{{.Names}}" | grep -q crawler-$TARGET; then
                # 추가적으로 애플리케이션 헬스체크 (포트 확인)
                sleep 5
                if docker exec crawler-$TARGET curl -f http://localhost:18080/actuator/health 2>/dev/null || [ $? -eq 0 ]; then
                  echo "[DEPLOY] $TARGET is healthy"
                  break
                fi
              fi
              echo "[DEPLOY] Waiting... ($i/30)"
              sleep 2
            done

            if [ $i -eq 30 ]; then
              echo "[ERROR] $TARGET failed to start properly"
              docker-compose -f docker-compose.$TARGET.yml logs
              docker-compose -f docker-compose.$TARGET.yml down
              exit 1
            fi

            # Nginx upstream 토글
            echo "[DEPLOY] Switching Nginx upstream to $TARGET..."
            if [ -n "$CURRENT" ]; then
              sudo sed -i \
                "s|server crawler-$CURRENT:18080;|server crawler-$TARGET:18080;|g" \
                /etc/nginx/sites-available/default
            else
              # 처음 배포인 경우 nginx 설정 확인
              if ! grep -q "server crawler-$TARGET:18080;" /etc/nginx/sites-available/default; then
                echo "[WARNING] Nginx configuration may need manual setup"
              fi
            fi
          
            # Nginx 설정 테스트 후 리로드
            if sudo nginx -t; then
              sudo nginx -s reload
              echo "[DEPLOY] Nginx reloaded successfully"
            else
              echo "[ERROR] Nginx configuration test failed"
              # 설정 롤백
              if [ -n "$CURRENT" ]; then
                sudo sed -i \
                  "s|server crawler-$TARGET:18080;|server crawler-$CURRENT:18080;|g" \
                  /etc/nginx/sites-available/default
              fi
              exit 1
            fi

            # 이전 스택 정리 (있는 경우에만)
            if [ -n "$CURRENT" ]; then
              echo "[DEPLOY] Stopping $CURRENT stack..."
              docker-compose -f docker-compose.$CURRENT.yml down
            fi

            # 사용하지 않는 Docker 이미지 정리
            docker image prune -f

            echo "[DEPLOY] Crawling-Service successfully deployed as $TARGET"
          EOF